@model WebApplicationPhoneBook.Models.PhoneItem

@{
    ViewData["Title"] = "AddElement";
}

@* <h1>Add Element</h1> *@

<h4>Phone Item</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="AddElement">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <input type="hidden" asp-for="ID" class="form-control" />
            </div>
            <!--input for name-->
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <!--input for phone-->
            <div class="form-group">
                <label asp-for="Phone" class="control-label"></label>
                <input asp-for="Phone" class="form-control" />
                <span asp-validation-for="Phone" class="text-danger"></span>
            </div>
            <!--input for country-->
            <div class="form-group">
                <label asp-for="Country" class="control-label"></label>
                <div class="input-group">
                    <input asp-for="Country" class="form-control" id="addressInputCountry" />
                    <div class="input-group-append">
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#CountryId">Country</button>
                    </div>
                </div>
                <span asp-validation-for="Country" class="text-danger"></span>
            </div>
            <!--input for city-->
            <div class="form-group">
                <label asp-for="City" class="control-label"></label>
                <div class="input-group">
                    <input asp-for="City" class="form-control" id="addressInputCity" />
                    <div class="input-group-append">
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#CityId">City</button>
                    </div>
                </div>
                <span asp-validation-for="City" class="text-danger"></span>
            </div>
            <!--input for Street-->
            <div class="form-group">
                <label asp-for="Street" class="control-label"></label>
                <div class="input-group">
                    <input asp-for="Street" class="form-control" id="addressInputStreet" />
                    <div class="input-group-append">
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#StreetId">Street</button>
                    </div>
                </div>
                <span asp-validation-for="Street" class="text-danger"></span>
            </div>
            <!--input for House number-->
            <div class="form-group">
                <label asp-for="House_number" class="control-label"></label>
                <div class="input-group">
                    <input asp-for="House_number" class="form-control" id="addressInputHouseNumber" />
                    <div class="input-group-append">
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#HouseNumberId">House number</button>
                    </div>
                </div>
                <span asp-validation-for="House_number" class="text-danger"></span>
            </div>
            <!--input for email-->
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="City" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>


<!-- Modal window for Country select -->
<div class="modal fade" id="CountryId" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Countries</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="text" class="form-control" style="width: 100%;" id="myInputCountry" oninput="handleInput()" />
                @* <select class="form-select" id="citySelect" size="3" aria-label="Выберите город"> *@

                <select class="form-select" id="countrySelect" size="3" aria-label="size 3 select example">
                    @* @for (int i = 0; i < ViewBag.ListCountry.Count; i++)
                    {
                        <option value=@i>@ViewBag.ListCountry[i]</option>
                    } *@

                </select>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="handleSelectCountry()" data-bs-dismiss="modal">Select</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal window for City select -->
<div class="modal fade" id="CityId" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Города</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="text" class="form-control" style="width: 100%;" id="myInputCity" oninput="handleInput()" />
                @* <select class="form-select" id="citySelect" size="3" aria-label="Выберите город"> *@
                    
                <select class="form-select" id="citySelect" size="3" aria-label="size 3 select example">
                    @* @for (int i = 0; i < ViewBag.ListCity.Count; i++)
                    {
                        <option value=@i>@ViewBag.ListCity[i]</option>
                    } *@

                </select>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="handleSelectCity()" data-bs-dismiss="modal">Select</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal window for Street select -->
<div class="modal fade" id="StreetId" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Street</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="text" class="form-control" style="width: 100%;" id="myInputStreet" oninput="handleInput()" />
                @* <select class="form-select" id="citySelect" size="3" aria-label="Выберите город"> *@

                <select class="form-select" id="streetSelect" size="3" aria-label="size 3 select example">
                    @* @for (int i = 0; i < ViewBag.ListStreet.Count; i++)
                    {
                        <option value=@i>@ViewBag.ListStreet[i]</option>
                    } *@

                </select>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="handleSelectStreet()" data-bs-dismiss="modal">Select</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal window for HouseNumber select -->
<div class="modal fade" id="HouseNumberId" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">House number</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="text" class="form-control" style="width: 100%;" id="myInputHouseNumber" oninput="handleInput()" />
                @* <select class="form-select" id="citySelect" size="3" aria-label="Выберите город"> *@

                <select class="form-select" id="houseNumberSelect" size="3" aria-label="size 3 select example">
                    @* @for (int i = 0; i < ViewBag.ListHouseNumber.Count; i++)
                    {
                        <option value=@i>@ViewBag.ListHouseNumber[i]</option>
                    } *@

                </select>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="handleSelectHouseNumber()" data-bs-dismiss="modal">Select</button>
            </div>
        </div>
    </div>
</div>

<script>
    // receiving countries when page is loading
    document.addEventListener('DOMContentLoaded', async function () {
        await fetchCountries();
    });

    // receiving countries function
    async function fetchCountries() {
        try {
            const response = await fetch('https://restcountries.com/v3.1/all');
            const countries = await response.json();
            countries.sort((a, b) => a.name.common.localeCompare(b.name.common));
            const countrySelect = document.getElementById('countrySelect');
            countrySelect.innerHTML = ''; 

            countries.forEach(country => {
                const option = new Option(country.name.common, country.cca2); 
                countrySelect.append(option);
            });
        } catch (error) {
            console.error('Ошибка при получении стран:', error);
        }
    }

    // handle selected country
    async function handleSelectCountry() {
        const countryId = document.getElementById("countrySelect").value;
        await fetchCities(countryId);
        const selectedCountry = document.getElementById("countrySelect").options[document.getElementById("countrySelect").selectedIndex].text;
        document.getElementById("addressInputCountry").value = selectedCountry;
    }

   

    // receiving cities of the selected country
    async function fetchCities(countryId) {
        try {
            // JSON file path
            const response = await fetch('/data/cities.json');

            if (!response.ok) {
                throw new Error('Сеть ответила с ошибкой: ' + response.status);
            }

            const data = await response.json();
            console.log(data); 
            const countries = data.countries;
            const cities = countries[countryId];
            cities.sort((a, b) => a.localeCompare(b));
            const citySelect = document.getElementById('citySelect');
            citySelect.innerHTML = '';

            cities.forEach(city => {
                const option = new Option(city, city);
                citySelect.append(option);
            });
        } catch (error) {
            console.error('Ошибка:', error);
        }
    }

    // handlw selected city
    async function handleSelectCity() {
        const cityId = document.getElementById("citySelect").value;
        await fetchStreets(cityId);
        const selectedCity = document.getElementById("citySelect").options[document.getElementById("citySelect").selectedIndex].text;
        document.getElementById("addressInputCity").value = selectedCity;
    }

    //receiving streets of the selected city
    async function fetchStreets(cityName) {
        try {
            const query = `
                [out:json];
                area["name"="${cityName}"]->.a;
                (
                    way["highway"](area.a);
                    relation["highway"](area.a);
                );
                out body;
                >;
            `;

            const overpassUrl = 'https://overpass-api.de/api/interpreter?data=' + encodeURIComponent(query);

            const response = await fetch(overpassUrl);

            if (!response.ok) {
                throw new Error('Ошибка: ' + response.status);
            }

            const data = await response.json();

            let streets = data.elements.map(element => {
                if (element.tags && element.tags.name) {
                    return element.tags.name;
                }
            }).filter(Boolean); 

            streets = [...new Set(streets)];

            streets.sort((a, b) => a.localeCompare(b));

            console.log('Улицы в городе', cityName, ':', streets);

            const streetSelect = document.getElementById('streetSelect');
            streetSelect.innerHTML = ''; 

            streets.forEach(street => {
                const option = new Option(street, street);
                streetSelect.append(option);
            });

        } catch (error) {
            console.error('Ошибка при получении улиц:', error);
        }
    }

    // handle selected street
    async function handleSelectStreet() {
        const streetId = document.getElementById("streetSelect").value;
        await fetchHouseNumbers(streetId);
        const selectedStreet = document.getElementById("streetSelect").options[document.getElementById("streetSelect").selectedIndex].text;
        document.getElementById("addressInputStreet").value = selectedStreet;
    }

    //function for house numbers
    async function fetchHouseNumbers(streetName) {
        try {
            const query = `
                [out:json];
                (
                    node["addr:street"="${streetName}"];
                    way["addr:street"="${streetName}"];
                );
                out body;
            `;

            const overpassUrl = 'https://overpass-api.de/api/interpreter?data=' + encodeURIComponent(query);

            const response = await fetch(overpassUrl);

            if (!response.ok) {
                throw new Error('Ошибка: ' + response.status);
            }

            const data = await response.json();

            let houseNumbers = data.elements.map(element => {
                if (element.tags && element.tags['addr:housenumber']) {
                    return element.tags['addr:housenumber']; 
                }
            }).filter(Boolean); 

            houseNumbers = [...new Set(houseNumbers)];

            houseNumbers = houseNumbers
                .map(number => parseInt(number, 10)) 
                .filter(Boolean) 
                .sort((a, b) => a - b);

            console.log('Номера домов на улице', streetName, ':', houseNumbers);

            const houseNumberSelect = document.getElementById('houseNumberSelect');
            houseNumberSelect.innerHTML = '';

            houseNumbers.forEach(number => {
                const option = new Option(number, number);
                houseNumberSelect.append(option);
            });

        } catch (error) {
            console.error('Ошибка при получении номеров домов:', error);
        }
    }

    // handle selected house number
    function handleSelectHouseNumber() {
        const selectElement = document.getElementById("houseNumberSelect");
        const selectedHouseNumber = selectElement.options[selectElement.selectedIndex].text;
        document.getElementById("addressInputHouseNumber").value = selectedHouseNumber;
    }

    // filters for cities
    document.getElementById('myInputCity').addEventListener('input', function () {
        const filterValue = this.value.toLowerCase();
        const select = document.getElementById('citySelect');
        const options = select.options;

        for (let i = 0; i < options.length; i++) {
            const optionText = options[i].text.toLowerCase();
            options[i].style.display = optionText.includes(filterValue) ? 'block' : 'none';
        }
    });

    // filters for countries
    document.getElementById('myInputCountry').addEventListener('input', function () {
        const filterValue = this.value.toLowerCase();
        const select = document.getElementById('countrySelect');
        const options = select.options;

        for (let i = 0; i < options.length; i++) {
            const optionText = options[i].text.toLowerCase();
            options[i].style.display = optionText.includes(filterValue) ? 'block' : 'none';
        }
    });

    // filters for streets
    document.getElementById('myInputStreet').addEventListener('input', function () {
        const filterValue = this.value.toLowerCase();
        const select = document.getElementById('streetSelect');
        const options = select.options;

        for (let i = 0; i < options.length; i++) {
            const optionText = options[i].text.toLowerCase();
            options[i].style.display = optionText.includes(filterValue) ? 'block' : 'none';
        }
    });

    // filter for house numbers
    document.getElementById('myInputHouseNumber').addEventListener('input', function () {
        const filterValue = this.value.toLowerCase();
        const select = document.getElementById('houseNumberSelect');
        const options = select.options;

        for (let i = 0; i < options.length; i++) {
            const optionText = options[i].text.toLowerCase();
            options[i].style.display = optionText.includes(filterValue) ? 'block' : 'none';
        }
    });
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
