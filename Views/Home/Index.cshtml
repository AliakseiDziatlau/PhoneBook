@model WebApplicationPhoneBook.Models.ModelPhoneItem

@{
    ViewData["Title"] = "index";
}

<h1>Search...</h1>

<p>
    <a asp-action="AddElement">Create New</a>
</p>


<div id="mess_err_id" class="hidden">
    
</div>



<!--Filter window-->
@using (Html.BeginForm("GetFilter", "Home", FormMethod.Post, new { id = "data-filter" }))
{
    
    <button class="filter-on">Filter</button>
    <button id="openModal">Открыть карту</button>
    <div class="filter-container hidden">
        <button type="button" class="close-btn hidden">&times;</button>
        <button type="button" class="reset-btn">⟳</button>
        <div class="row">
            <div class="labels-container">
                <!--Label for name-->
                <div>
                    <label>Name</label><br />
                    @Html.TextBoxFor(m=>m.PhoneItemFilter.Name, new {id="nameInput"})
                </div>
                <!--Label for phone-->
                <div>
                    <label>Phone</label><br />
                    @Html.TextBoxFor(m => m.PhoneItemFilter.Phone, new { id = "phoneInput" })
                </div>
                <!--Label for country-->
                <div>
                    <label>Country</label><br />
                    @Html.TextBoxFor(m => m.PhoneItemFilter.Country, new { id = "countryInput" })
                </div>
                <!--Label for city-->
                <div>
                    <label>City</label><br />
                    @Html.TextBoxFor(m => m.PhoneItemFilter.City, new { id = "cityInput" })
                </div>
                <!--Label for street-->
                <div>
                    <label>Street</label><br />
                    @Html.TextBoxFor(m => m.PhoneItemFilter.Street, new { id = "streetInput" })
                </div>
            </div> 
        </div>
        <button type="submit" class="button-blue button-action">Apply</button>
    </div>
}

<!--Map window-->
<div id="myModal" class="modall">
    <!-- Модальное окно -->
    <div class="modall-content">
        <span class="close">&times;</span> <!-- Кнопка закрытия -->
        <h2>Карта</h2>
        <div id="map"></div> <!-- Элемент для карты -->
    </div>
</div>
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<table class="table">
    <!--Head of the table-->
    <thead>
        <tr>
            <!--ID-->
            <th>
                @Html.DisplayNameFor(model => model.PhoneItem.Id)
            </th>
            <!--Name-->
            <th>
                @Html.DisplayNameFor(model => model.PhoneItem.Name)
            </th>
            <!--Phone-->
            <th>
                @Html.DisplayNameFor(model => model.PhoneItem.Phone_number)
            </th>
            <!--Country-->
            <th>
                @Html.DisplayNameFor(model => model.PhoneItem.Country)
            </th>
            <!--City-->
            <th>
                @Html.DisplayNameFor(model => model.PhoneItem.City)
            </th>
            <!--Street-->
            <th>
                @Html.DisplayNameFor(model => model.PhoneItem.Street)
            </th>
            <!--House number-->
            <th>
                @Html.DisplayNameFor(model => model.PhoneItem.House_number)
            </th>
            <!--Email-->
            <th>
                @Html.DisplayNameFor(model => model.PhoneItem.Email)
            </th>
            <th></th>
        </tr>
    </thead>
    <!--Body of the table-->
    <tbody>
@foreach (var item in Model.listPhone) {
        <tr>
            <!--ID-->
            <td>
                @Html.DisplayFor(modelItem => item.Id)
            </td>
            <!--Name-->
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <!--Phone-->
            <td>
                @Html.DisplayFor(modelItem => item.Phone_number)
            </td>
            <!--Country-->
            <td>
                @Html.DisplayFor(modelItem => item.Country)
            </td>
            <!--City-->
            <td>
                @Html.DisplayFor(modelItem => item.City)
            </td>
            <!--Street-->
            <td>
                @Html.DisplayFor(modelItem => item.Street)
            </td>
            <!--House number-->
            <td>
                @Html.DisplayFor(modelItem => item.House_number)
            </td>
            <!--Email-->
            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
                @Html.ActionLink("Edit", "EditPhone", new { id = item.Id }) |
                <a href="#" onclick="deleteItm(@item.Id)">Delete</a>
                @* @Html.ActionLink("Delete", "Delete", new { id = item.ID }) *@
            </td>
        </tr>
}
    </tbody>
</table>
<script>
    @* async function deleteItm(id) {
        let isDelete = confirm("Вы хотите удалить запись?");
        if (isDelete) {
            try {

                const response = await fetch('/Home/DeletePhone/' + id, {
                    method: 'GET'
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                window.location.href = '@Url.Action("Index", "Home")' ;
            } catch (error) {
                console.error('There was a problem with the fetch operation:', error);
            }
        }
    } *@
     function deleteItm(id) {
         let isDelete = confirm("Вы хотите удалить запись?");
         if (isDelete) {
             //window.open("Home/Delete/" + id);
             $.ajax({
                 url: '/Home/DeletePhone/' + id,       
                 method: 'get',
                 success: function (data) {
                     if (data === "ok") {
                         document.location.href = '@Url.Action("Index", "Home")';
                     }
                     else {
                         const messageBox = document.getElementById("mess_err_id");
                         messageBox.classList.remove("hidden");
                         messageBox.innerHTML = `Error: ${data}`;
                     }
                 }
           });
         }
     }
    const filterOn = document.querySelector(".filter-on");
    const filtersContaner = document.querySelector(".filter-container");
    const btnClose = document.querySelector(".close-btn");
    const btnSetSettings = document.querySelector(".button-action");
    const btnReset = document.querySelector(".reset-btn");
    filterOn.addEventListener("click", function (e) {
        e.preventDefault();
        filtersContaner.classList.remove("hidden");
        filterOn.classList.add("hidden");
        btnClose.classList.remove("hidden");
    });
    window.addEventListener('load', function () {
        // Этот код выполнится, когда вся страница полностью загружена
        if ('@ViewBag.IsFilterClose' === 'False') {
            filtersContaner.classList.remove("hidden");
            btnClose.classList.remove("hidden");
            filterOn.classList.add("hidden");
        }

    });

    btnClose.addEventListener("click", function (e) {
        filtersContaner.classList.add("hidden");
        btnClose.classList.add("hidden");
        filterOn.classList.remove("hidden");
    });

    btnReset.addEventListener("click", function (e) {
        e.preventDefault();
        document.getElementById("nameInput").value = "";
        document.getElementById("phoneInput").value = "";
        document.getElementById("countryInput").value = "";
        document.getElementById("cityInput").value = "";
        document.getElementById("streetInput").value = "";
    });


    /////////////////////////////
    function _loadMap(position) {
        const { latitude } = position.coords;
        const { longitude } = position.coords;

        console.log(`Координаты: ${latitude}, ${longitude}`);

        const coords = [latitude, longitude];

        // Инициализация карты
        const map = L.map('map').setView(coords, 13); // Уровень масштабирования 13

       @*  // Добавление слоя карты
        L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        }).addTo(map); *@
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

        // Добавление маркера на текущую позицию
        const marker = L.marker(coords).addTo(map)
            .bindPopup('Вы находитесь здесь!')
            .openPopup();
    }

    // Обработка ошибок при получении геолокации
    function handleError(err) {
        console.warn(`Ошибка (${err.code}): ${err.message}`);
    }

    // Получаем геолокацию пользователя
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(_loadMap, handleError);
    } else {
        console.log("Геолокация не поддерживается вашим браузером.");
    }

    // Модальное окно
    const modal = document.getElementById("myModal");
    const btnOpen = document.getElementById("openModal");
    const span = document.getElementsByClassName("close")[0];

    // Открытие модального окна при нажатии кнопки
    btnOpen.onclick = function (e) {
        e.preventDefault();
        modal.style.display = "block";
    }

    // Закрытие модального окна
    span.onclick = function () {
        modal.style.display = "none";
    }

    // Закрытие модального окна при клике вне его
    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }
</script>
